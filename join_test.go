package lipgloss

import "testing"

func Example_special_case() {
	out(JoinVertical(Left))
	out(JoinVertical(Left, ""))
	out(JoinVertical(Left, "hello"))
	out(JoinHorizontal(Top))
	out(JoinHorizontal(Top, ""))
	out(JoinHorizontal(Top, "hello"))

	// Output:
	// üõá
	//
	// üõá
	//
	// helloüõá
	//
	// üõá
	//
	// üõá
	//
	// helloüõá
}

func Example_vertical() {
	blockA := "AAA\nAA"
	blockB := "BBB\nBBBBB\nBB"
	blockC := "C"

	out(JoinVertical(Left, blockA, blockB, blockC))
	out(JoinVertical(Center, blockA, blockB, blockC))
	out(JoinVertical(Right, blockA, blockB, blockC))
	out(JoinVertical(0.25, blockA, blockB, blockC))

	// Output:
	// AAA__‚ê§
	// AA___‚ê§
	// BBB__‚ê§
	// BBBBB‚ê§
	// BB___‚ê§
	// C____üõá
	//
	// _AAA_‚ê§
	// __AA_‚ê§
	// _BBB_‚ê§
	// BBBBB‚ê§
	// __BB_‚ê§
	// __C__üõá
	//
	// __AAA‚ê§
	// ___AA‚ê§
	// __BBB‚ê§
	// BBBBB‚ê§
	// ___BB‚ê§
	// ____Cüõá
	//
	// _AAA_‚ê§
	// _AA__‚ê§
	// _BBB_‚ê§
	// BBBBB‚ê§
	// _BB__‚ê§
	// _C___üõá
}

func Example_horizontal() {
	blockA := "AAA\nAA\n\n\n"
	blockB := "BBB\nBBBBB\nBB"
	blockC := "C"

	out(JoinHorizontal(Top, blockA, blockB, blockC))
	out(JoinHorizontal(Center, blockA, blockB, blockC))
	out(JoinHorizontal(Bottom, blockA, blockB, blockC))
	out(JoinHorizontal(0.25, blockA, blockB, blockC))

	// Output:
	// AAABBB__C‚ê§
	// AA_BBBBB_‚ê§
	// ___BB____‚ê§
	// _________‚ê§
	// _________üõá
	//
	// AAA______‚ê§
	// AA_BBB___‚ê§
	// ___BBBBBC‚ê§
	// ___BB____‚ê§
	// _________üõá
	//
	// AAA______‚ê§
	// AA_______‚ê§
	// ___BBB___‚ê§
	// ___BBBBB_‚ê§
	// ___BB___Cüõá
	//
	// AAA______‚ê§
	// AA_BBB__C‚ê§
	// ___BBBBB_‚ê§
	// ___BB____‚ê§
	// _________üõá
}

func TestJoinVertical(t *testing.T) {
	type test struct {
		name     string
		result   string
		expected string
	}
	tests := []test{
		{"pos0", JoinVertical(Left, "A", "BBBB"), "A   \nBBBB"},
		{"pos1", JoinVertical(Right, "A", "BBBB"), "   A\nBBBB"},
		{"pos0.25", JoinVertical(0.25, "A", "BBBB"), " A  \nBBBB"},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			if test.result != test.expected {
				t.Errorf("Got \n%s\n, expected \n%s\n", test.result, test.expected)
			}
		})
	}
}

func TestJoinHorizontal(t *testing.T) {
	type test struct {
		name     string
		result   string
		expected string
	}
	tests := []test{
		{"pos0", JoinHorizontal(Top, "A", "B\nB\nB\nB"), "AB\n B\n B\n B"},
		{"pos1", JoinHorizontal(Bottom, "A", "B\nB\nB\nB"), " B\n B\n B\nAB"},
		{"pos0.25", JoinHorizontal(0.25, "A", "B\nB\nB\nB"), " B\nAB\n B\n B"},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			if test.result != test.expected {
				t.Errorf("Got \n%s\n, expected \n%s\n", test.result, test.expected)
			}
		})
	}
}
